study_4$dir <- sign(study_4$logFC)
# Get all unique genes from the 4 studies
unique_genes <- Reduce(union, list(study_1$Gene_symbol,
study_2$Gene_symbol,
study_3$Gene_symbol,
study_4$Gene_symbol))
print(unique_genes)
# Get direction status of expression of the unique genes to determine if they are conflicting or not
sign <- matrix(data = 0, nrow = length(unique_genes), ncol = length(n_samp)+1)
row.names(sign) <- unique_genes
sign[,1] <- study_1$dir[match(unique_genes, study_1$Gene_symbol)]
sign[,2] <- study_2$dir[match(unique_genes, study_2$Gene_symbol)]
sign[,3] <- study_3$dir[match(unique_genes, study_3$Gene_symbol)]
sign[,4] <- study_4$dir[match(unique_genes, study_4$Gene_symbol)]
for(l in 1:length(unique_genes))
{
if (1 %in% sign[l, c(1:length(n_samp))] & -1 %in% sign[l, c(1:length(n_samp))])
{
sign[l, (length(n_samp)+1)] <- 1
}
}
write.csv(as.data.frame(sign), "Sign.csv")
### Calculation of Ng terms
# Step 1 : Estimation of weights
## Initialize an empty weights matrix with the number of rows equal to the number of unique genes and
## columns equal to the number of studies
weights <- matrix(0, nrow = length(unique_genes), ncol = length(n_samp))
# each element in weight matrix corresponds to a unique gene
# numerator terms of w_s
weights[which((unique_genes %in% study_1$Gene_symbol) == TRUE), 1] <- n_samp[1]
weights[which((unique_genes %in% study_2$Gene_symbol) == TRUE), 2] <- n_samp[2]
weights[which((unique_genes %in% study_3$Gene_symbol) == TRUE), 3] <- n_samp[3]
weights[which((unique_genes %in% study_4$Gene_symbol) == TRUE), 4] <- n_samp[4]
# denominator terms of w_s
denom <- apply(weights, 1, sum)
# divide numerator by denominator and square root to get final weights
weights <- weights/denom
weights <- sqrt(weights)
row.names(weights) <- as.character(unique_genes)
colnames(weights) <- c("study_1", "study_2", "study_3", "study_4")
weights <- as.data.frame(weights, stringsAsFactors = FALSE)
write.csv(weights, file = "weights.csv") #save weights as csv - optional
# Step 2 : Calculation of each term of Ng for a gene g
ng_terms <- matrix(0, nrow = nrow(weights), ncol = ncol(weights))
for(j in 1:nrow(ng_terms))
{
#check if a gene has same direction of expression across studies
#if yes, then use first case definition for Ng
if (sign[j, ncol(sign)] == 0) #for non conflicting genes
{
#dataset 1
if (unique_genes[j] %in% study_1$Gene_symbol)
{
k = which(study_1$Gene_symbol == unique_genes[j])
p_val = min(max(study_1$Pvalue[k],1e-16), 1 - 1e-16)
ng_terms[j,1] <- weights$study_1[j] * qnorm((1 - p_val), mean = 0, sd = 1)
}
#dataset 2
if (unique_genes[j] %in% study_2$Gene_symbol)
{
k = which(study_2$Gene_symbol == unique_genes[j])
p_val = min(max(study_2$Pvalue[k],1e-16), 1 - 1e-16)
ng_terms[j,2] <- weights$study_2[j] * qnorm((1 - p_val), mean = 0, sd = 1)
}
#dataset 3
if (unique_genes[j] %in% study_3$Gene_symbol)
{
k = which(study_3$Gene_symbol == unique_genes[j])
p_val = min(max(study_3$Pvalue[k],1e-16), 1 - 1e-16)
ng_terms[j,3] <- weights$study_3[j] * qnorm((1 - p_val), mean = 0, sd = 1)
}
#dataset 1
if (unique_genes[j] %in% study_4$Gene_symbol)
{
k = which(study_4$Gene_symbol == unique_genes[j])
p_val = min(max(study_4$Pvalue[k],1e-16), 1 - 1e-16)
ng_terms[j,4] <- weights$study_4[j] * qnorm((1 - p_val), mean = 0, sd = 1)
}
}
#check if a gene has conflicting direction of expression across studies
#if yes, use second case definition of Ng
if(sign[j, ncol(sign)] == 1)
{
#dataset 1
if(unique_genes[j] %in% study_1$Gene_symbol)
{
k = which(study_1$Gene_symbol == unique_genes[j])
p_val = min(max(study_1$Pvalue[k], sig_cutoff), 1 - sig_cutoff)
ber.rand.var = sign(study_1$logFC[j]) #Bernoulli random variable, only takes 1 and -1 as values
ng_terms[j,1] <- weights$study_1[j] * ber.rand.var * abs(qnorm((1 - p_val), mean = 0, sd = 1))
}
#dataset 2
if(unique_genes[j] %in% study_2$Gene_symbol)
{
k = which(study_2$Gene_symbol == unique_genes[j])
p_val = min(max(study_2$Pvalue[k], sig_cutoff), 1 - sig_cutoff)
ber.rand.var = sign(study_2$logFC[j]) #Bernoulli random variable, only takes 1 and -1 as values
ng_terms[j,2] <- weights$study_2[j] * ber.rand.var * abs(qnorm((1 - p_val), mean = 0, sd = 1))
}
#dataset 3
if(unique_genes[j] %in% study_3$Gene_symbol)
{
k = which(study_3$Gene_symbol == unique_genes[j])
p_val = min(max(study_3$Pvalue[k], sig_cutoff), 1 - sig_cutoff)
ber.rand.var = sign(study_3$logFC[j]) #Bernoulli random variable, only takes 1 and -1 as values
ng_terms[j,3] <- weights$study_3[j] * ber.rand.var * abs(qnorm((1 - p_val), mean = 0, sd = 1))
}
#dataset 4
if(unique_genes[j] %in% study_4$Gene_symbol)
{
k = which(study_4$Gene_symbol == unique_genes[j])
p_val = min(max(study_4$Pvalue[k], sig_cutoff), 1 - sig_cutoff)
ber.rand.var = sign(study_4$logFC[j]) #Bernoulli random variable, only takes 1 and -1 as values
ng_terms[j,4] <- weights$study_4[j] * ber.rand.var * abs(qnorm((1 - p_val), mean = 0, sd = 1))
}
}
}
colnames(ng_terms) <- datasets
ng_terms <- as.data.frame(ng_terms, stringsAsFactors = FALSE)
row.names(ng_terms) <- row.names(weights)
# Step 3 : Sum all the Ng terms row-wise
ng <- as.data.frame(rowSums(ng_terms))
colnames(ng) <- c("ng")
row.names(ng) <- row.names(ng_terms)
# Step 4 : Hypothesis testing
#One sided test on right-hand tail of the distribution performed for genes with same direction of expression
#Two sided test performed for genes with conflicting direction of expression
## First do one sided test for all genes, then replace with two sided test for conflicting genes
ng$metaFIN_pval <- 1 - pnorm(ng$ng)
conflict_index <- which(sign[, ncol(sign)] == 1) #index of conflicting genes
ng$metaFIN_pval[conflict_index] <- 2 * (1 - pnorm(abs(ng$ng[conflict_index]))) #replaced by two-sided test
# FDR correction for multiple hypothesis testing using Benjamini-Hochberg method
ng$metaFIN_padj <- p.adjust(ng$metaFIN_pval, method = "BH", n = length(ng$metaFIN_pval))
return(ng)
}
# Dataset 1
head(GSE184316.degs)
study.1_GSE184316 <- GSE184316.degs %>%
select(Gene_Symbol, log2FoldChange, pvalue)
colnames(study.1_GSE184316) <- c("Gene_symbol", "logFC", "Pvalue")
#Dataset 2
head(GSE150910.biopsy.degs)
study.2_GSE150910.biopsy <- GSE150910.biopsy.degs %>%
select(Gene_symbol, log2FoldChange, pvalue)
colnames(study.2_GSE150910.biopsy) <- c("Gene_symbol", "logFC", "Pvalue")
#Dataset 3
head(GSE150910.explant.degs)
study.3_GSE150910.explant <- GSE150910.explant.degs %>%
select(Gene_symbol, log2FoldChange, pvalue)
colnames(study.3_GSE150910.explant) <- c("Gene_symbol", "logFC", "Pvalue")
#Dataset 4
head(GSE47460.GPL14550.degs)
study.4_GSE47460 <- GSE47460.GPL14550.degs %>%
select(Gene_Symbol, logFC, P.Value)
colnames(study.4_GSE47460) <- c("Gene_symbol", "logFC", "Pvalue")
meta_FIN_results <- metaFIN(study_1 = study.1_GSE184316,
study_2 = study.2_GSE150910.biopsy,
study_3 = study.3_GSE150910.explant,
study_4 = study.4_GSE47460,
n_samp = n_samp,
datasets = datasets)
meta_FIN_results <- meta_FIN_results %>%
rownames_to_column(var = "Gene_symbol")
View(meta_FIN_results)
head(meta_FIN_results)
hist(meta_FIN_results$ng)
hist(meta_FIN_results$metaFIN_pval)
hist(meta_FIN_results$metaFIN_padj)
{
if(gene %in% study.1_GSE184316$Gene_symbol)
{
gene_index <- which(gene %in% meta_FIN_results$Gene_symbol)
meta_FIN_results$GSE184316[gene_index] <- study.1_GSE184316$logFC[[gene]]
}
}
# Find matching indices in both data frames
gene_index <- match(meta_FIN_results$Gene_symbol, study.1_GSE184316$Gene_symbol)
# Update the GSE184316 column with corresponding logFC values where matches exist
meta_FIN_results$GSE184316 <- study.1_GSE184316$logFC[gene_index]
View(study.1_GSE184316)
all(meta_FIN_results$Gene_symbol %in% study.1_GSE184316$Gene_symbol)
all(meta_FIN_results$Gene_symbol == study.1_GSE184316$Gene_symbol)
all(meta_FIN_results$Gene_symbol %in% study.1_GSE184316$Gene_symbol)
sum(is.na(meta_FIN_results$GSE184316))
print(is.na(meta_FIN_results$GSE184316 == TRUE))
print(setdiff(meta_FIN_results$GSE184316, study.1_GSE184316$Gene_symbol))
print(setdiff(meta_FIN_results$Gene_symbol, study.1_GSE184316))
print(setdiff(meta_FIN_results$Gene_symbol, study.1_GSE184316$Gene_symbol))
## Dataset 2 logFC
# Find matching indices in both data frames
gene_index <- match(meta_FIN_results$Gene_symbol, study.2_GSE150910.biopsy$Gene_symbol)
# Update the GSE184316 column with corresponding logFC values where matches exist
meta_FIN_results$GSE150910.biopsy <- study.2_GSE150910.biopsy$logFC[gene_index]
## Dataset 3 logFC
# Find matching indices in both data frames
gene_index <- match(meta_FIN_results$Gene_symbol, study.3_GSE150910.explant$Gene_symbol)
# Update the GSE184316 column with corresponding logFC values where matches exist
meta_FIN_results$GSE150910.explant <- study.3_GSE150910.explant$logFC[gene_index]
## Dataset 4 logFC
# Find matching indices in both data frames
gene_index <- match(meta_FIN_results$Gene_symbol, study.4_GSE47460$Gene_symbol)
# Update the GSE184316 column with corresponding logFC values where matches exist
meta_FIN_results$GSE47460 <- study.4_GSE47460$logFC[gene_index]
View(meta_FIN_results)
# Calculate mean absolute log fold change
meta_FIN_results$mean_abs_logfc <- abs((meta_FIN_results$GSE184316 +
meta_FIN_results$GSE150910.biopsy +
meta_FIN_results$GSE150910.explant +
meta_FIN_results$GSE47460)/4)
4/0
0/0
for(l in 1:nrow(meta_FIN_results$Gene_symbol))
{
logfc.sum = 0
counter <- 0
if (is.na(meta_FIN_results$GSE184316[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE184316[l]
}
if(is.na(meta_FIN_results$GSE150910.biopsy[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE150910.biopsy[l]
}
if(is.na(meta_FIN_results$GSE150910.explant[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE150910.explant[l]
}
if(is.na(meta_FIN_results$GSE47460[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE47460[l]
}
meta_FIN_results$mean_abs_logfc <- abs(logfc.sum/counter)
}
for(l in 1:nrow(meta_FIN_results))
{
logfc.sum = 0
counter <- 0
if (is.na(meta_FIN_results$GSE184316[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE184316[l]
}
if(is.na(meta_FIN_results$GSE150910.biopsy[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE150910.biopsy[l]
}
if(is.na(meta_FIN_results$GSE150910.explant[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE150910.explant[l]
}
if(is.na(meta_FIN_results$GSE47460[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE47460[l]
}
meta_FIN_results$mean_abs_logfc <- abs(logfc.sum/counter)
}
for(l in 1:nrow(meta_FIN_results))
{
logfc.sum = 0
counter <- 0
if (is.na(meta_FIN_results$GSE184316[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE184316[l]
}
if(is.na(meta_FIN_results$GSE150910.biopsy[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE150910.biopsy[l]
}
if(is.na(meta_FIN_results$GSE150910.explant[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE150910.explant[l]
}
if(is.na(meta_FIN_results$GSE47460[l]) == FALSE)
{
counter = counter + 1
logfc.sum = logfc.sum + meta_FIN_results$GSE47460[l]
}
meta_FIN_results$mean_abs_logfc[l] <- abs(logfc.sum/counter)
}
(0.67043238 + 0.64991142 + 0.661324136)/3
(6.269143 + 27.48363 + 0.2835694 + 0.7375571)/4
(7.617337 + 0.25589990 - 0.078062455)/3
colnames(meta_FIN_results)
View(meta_FIN_results)
meta_FIN_results <- meta_FIN_results[, c("Gene_symbol", "ng", "mean_abs_logfc", "GSE184316",
"GSE150910.biopsy", "GSE150910.explant", "GSE47460",
"metaFIN_pval", "metaFIN_padj")]
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
View(meta_FINM_degs)
write.csv(meta_FINM_degs, "FINM_significant DEGs.csv")
write.csv(meta_FINM_degs, "FINM_significant DEGs.csv", row.names = FALSE)
direction.expr <- read.csv("C:/IIT KGP/Sign.csv")
View(direction.expr)
FIN_genes_direction <- direction.expr %>%
filter(meta_FINM_degs$Gene_symbol %in% direction.expr$X)
FIN_genes_direction <- subset(direction.expr, select(meta_FINM_degs$Gene_symbol %in% direction.expr$X))
FIN_genes_direction <- direction.expr[,meta_FINM_degs$Gene_symbol %in% direction.expr$X]
FIN_genes_direction <- direction.expr[, which(meta_FINM_degs$Gene_symbol %in% direction.expr$X)]
FIN_genes_direction <- subset(direction.expr, subset = meta_FINM_degs %in% direction.expr$X)
View(FIN_genes_direction)
FIN_genes_direction <- subset(direction.expr, subset = meta_FINM_degs$Gene_symbol %in% direction.expr$X)
FIN_genes_direction <- subset(direction.expr, subset = direction.expr$X %in% meta_FIN_results$Gene_symbol)
colnames(direction.expr)
rm(FIN_genes_direction)
sum(is.na(meta_FINM_degs$Gene_symbol[3]))
is.na(meta_FINM_degs$Gene_symbol[3]))
is.na(meta_FINM_degs$Gene_symbol[3])
meta_FINM_degs$Gene_symbol[3]
sum(is.na(meta_FINM_degs$Gene_symbol[3, 1:ncol(meta_FINM_degs)]))
is.na(meta_FINM_degs$Gene_symbol[3, 1:ncol(meta_FINM_degs)])
is.na(meta_FINM_degs$Gene_symbol[3, 1:6])
is.na(meta_FINM_degs[3, 1:6])
sum(is.na(meta_FINM_degs[3, 1:ncol(meta_FINM_degs)]))
for(row in 1:nrow(meta_FINM_degs))
{
k = 0
for(column in 4:7)
{
if(is.na(meta_FINM_degs[row, column]) == FALSE)
{
k = k + 1
}
}
if(k < 2)
{
index <- append(index, row)
}
}
index <- vector(mode="numeric")
for(row in 1:nrow(meta_FINM_degs))
{
k = 0
for(column in 4:7)
{
if(is.na(meta_FINM_degs[row, column]) == FALSE)
{
k = k + 1
}
}
if(k < 2)
{
index <- append(index, row)
}
}
meta_FINM_degs <- meta_FINM_degs[, !(index)]
write.csv(meta_FINM_degs, "FINM_significant DEGs.csv", row.names = FALSE)
meta_FINM_degs <- meta_FINM_degs[, !(index)]
View(meta_FINM_degs)
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
index <- vector(mode="numeric")
for(row in 1:nrow(meta_FINM_degs))
{
k = 0
for(column in 4:7)
{
if(is.na(meta_FINM_degs[row, column]) == FALSE)
{
k = k + 1
}
}
if(k < 2)
{
index <- append(index, row)
}
}
meta_FINM_degs <- meta_FINM_degs[!(index), ]
View(meta_FINM_degs)
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
index <- vector(mode="numeric")
for(row in 1:nrow(meta_FINM_degs))
{
k = 0
for(column in 4:7)
{
if(is.na(meta_FINM_degs[row, column]) == FALSE)
{
k = k + 1
}
}
if(k < 2)
{
index <- append(index, row)
}
}
rm(index)
nan_indices_to_be_removed <- vector(mode="numeric") ##Removes the genes not present in atleast 2 or more datasets
for(row in 1:nrow(meta_FINM_degs))
{
k = 0
for(column in 4:7)
{
if(is.na(meta_FINM_degs[row, column]) == FALSE)
{
k = k + 1
}
}
if(k < 2)
{
nan_indices_to_be_removed <- append(nan_indices_to_be_removed, row)
}
}
meta_FINM_degs <- meta_FINM_degs[!nan_indices_to_be_removed, ]
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
nan_indices_to_be_removed <- vector(mode="numeric") ##Removes the genes not present in atleast 2 or more datasets
for(row in 1:nrow(meta_FINM_degs))
{
k = 0
for(column in 4:7)
{
if(is.na(meta_FINM_degs[row, column]) == FALSE)
{
k = k + 1
}
}
if(k < 2)
{
nan_indices_to_be_removed <- append(nan_indices_to_be_removed, row)
}
}
meta_FINM_degs <- meta_FINM_degs[- nan_indices_to_be_removed, ]
View(meta_FINM_degs)
write.csv(meta_FINM_degs, "FINM_significant DEGs.csv", row.names = FALSE)
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
write.csv(meta_FINM_degs, "FINM_significant DEGs.csv", row.names = FALSE)
rm(nan_indices_to_be_removed)
rm(l)
rm(k)
rm(row)
rm(column)
View(meta_FINM_degs)
# Set working directory
setwd("C:/IIT KGP")
# Set working directory
setwd("C:/IIT KGP/FINM")
View(direction.expr)
## change the column names
direction.expr <- direction.expr[, c("Gene_symbol", "GSE184316", "GSE150910.biopsy", "GSE150910.explant",
"GSE47460", "conflict_status")]
## change the column names
colnames(direction.expr) <- c("Gene_symbol", "GSE184316", "GSE150910.biopsy", "GSE150910.explant",
"GSE47460", "conflict_status")
View(metaFIN)
# filter direction.expr with the genes present in meta_FIN_degs
direction.degs <- direction.expr[direction.expr$Gene_symbol %in% meta_FINM_degs$Gene_symbol, ]
View(direction.degs)
# Set working directory
setwd("C:/IIT KGP/Meta analysis methods/FINM")
# change the column names
colnames(direction.expr) <- c("Gene_symbol", "GSE184316_dir", "GSE150910.biopsy_dir", "GSE150910.explant_dir",
"GSE47460_dir", "conflict_status") #same direction - 0, conflicting direction - 1
# filter direction.expr with the genes present in meta_FIN_degs
direction.degs <- direction.expr[direction.expr$Gene_symbol %in% meta_FINM_degs$Gene_symbol, ]
#subset direction with only the direction columns
directions <- direction.expr[, 2:5]
View(directions)
#subset direction with only the direction columns
directions <- direction.degs[, 2:5]
View(directions)
all(direction.degs == meta_FINM_degs)
all(direction.degs$Gene_symbol == meta_FINM_degs$Gene_symbol)
all(direction.degs$Gene_symbol %in% meta_FINM_degs$Gene_symbol)
# filter direction.expr with the genes present in meta_FIN_degs
direction.degs <- direction.expr[match(direction.expr$Gene_symbol %in% meta_FINM_degs$Gene_symbol), ]
# filter direction.expr with the genes present in meta_FIN_degs
direction.degs <- direction.expr[match(direction.expr$Gene_symbol,meta_FINM_degs$Gene_symbol), ]
# filter direction.expr with the genes present in meta_FIN_degs
direction.degs <- direction.expr[direction.expr$Gene_symbol %in% meta_FINM_degs$Gene_symbol, ]
direction.degs <- direction.degs[match(meta_FINM_degs$Gene_symbol, direction.degs$Gene_symbol)]
direction.degs <- direction.degs[match(meta_FINM_degs$Gene_symbol, direction.degs$Gene_symbol), ]
all(direction.degs$Gene_symbol == meta_FINM_degs$Gene_symbol)
#subset direction with only the direction columns
directions <- direction.degs[, 2:5]
filter_genes <- apply(directions, 1, function(row) {
# Count how many times 1 and -1 appear, ignoring NAs in count
count_pos1 <- sum(row == 1, na.rm = TRUE)
count_neg1 <- sum(row == -1, na.rm = TRUE)
# Return TRUE if any direction appears at least twice
(count_pos1 >= 2) | (count_neg1 >= 2)
})
print(filter_genes)
meta_FINM_degs <- meta_FIN_results[filter_genes, ]
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
library(tidyverse)
meta_FINM_degs <- meta_FIN_results %>%
filter(mean_abs_logfc > 1 & metaFIN_padj < 0.05) %>%
arrange(desc(ng))
meta_FINM_degs <- meta_FINM_degs[filter_genes, ]
write.csv(meta_FINM_degs, "DEGs_consistent expr in >=2 studies.csv")
write.csv(meta_FINM_degs, "DEGs_consistent expr in atleast 2 studies.csv")
write.csv(meta_FINM_degs, "DEGs_consistent expr in atleast 2 studies.csv", row.names = FALSE)
